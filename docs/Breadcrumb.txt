https://developers.google.com/search/docs/data-types/breadcrumb

Home
Products
Search for Developers
Reference
Send feedback
Breadcrumb
A breadcrumb trail on a page indicates the page's position in the site hierarchy, and it may
help users understand and explore a site effectively. A user can navigate all the way up in
the site hierarchy, one level at a time, by starting from the last breadcrumb in the
breadcrumb trail.
As of April 6, 2020, data-vocabulary.org markup will no longer be
eligible for the breadcrumb feature in Google Search. To be eligible after April 6, 2020, you
need to replace data-vocabulary.org markup with schema.org markup. Learn more about
sunsetting support
for data-vocabulary.
How to add structured data
Structured data is a standardized format for providing information about a page and classifying the page
content. If you’re new to structured data, you can learn more about
how structured data works.
Here's an overview of how to build, test, and release structured data. For a step-by-step guide
on how to add structured data to a web page, check out the
structured
data codelab.
Add the required properties. For information about where to put
structured data on the page, watch JSON-LD structured
data: Where to insert on the page.
Follow the guidelines.
Validate your code using the
Rich Results Test.
Deploy a few pages that include your structured data and use the URL Inspection tool to test how Google sees the page. Be sure that your page is
accessible to Google and not blocked by a robots.txt file, the noindex tag, or
login requirements. If the page looks okay, you can
ask Google to
recrawl your URLs.
Note: Allow time for re-crawling and re-indexing. Remember that it
may take several days after publishing a page for Google to find and crawl it.
To keep Google informed of future changes, we recommend that you
submit a
sitemap. You can automate this with the
Search Console Sitemap
API.
Examples
Google Search uses breadcrumb markup in the body of a web page to categorize
the information from the page in search results. Often, as illustrated in
following use cases, users can arrive at a page from very different types of
search queries. While each search may return the same web page, the breadcrumb
categorizes the content within the context of the Google Search query. The page
ancillaryjustice.html might display the following breadcrumb trails
depending upon the search context.
A common way to implement breadcrumbs is to use the path part of the URL as the breadcrumb
trail. Keep in mind that some parts of the URL path don't help people understand how the page
fits in your website. For example, given the URL
"https://example.com/pages/books/catcher_in_the_rye.html", "pages" doesn't add any information,
and neither does the top level element "example.com". We recommend providing breadcrumbs that
represent a typical user path to that web page, instead of mirroring the URL structure.
Single breadcrumb trail
A search query for a year and genre-based award, "2014 Nebula Award best novel", may generate
the following breadcrumb:
Books ›
Science Fiction ›
Award Winners
JSON-LD
Here's an example in JSON-LD to support that breadcrumb:
<html>
<head>
<title>Award Winners</title>
<script type="application/ld+json">
{
"@context": "https://schema.org",
"@type": "BreadcrumbList",
"itemListElement": [{
"@type": "ListItem",
"position": 1,
"name": "Books",
"item": "https://example.com/books"
},{
"@type": "ListItem",
"position": 2,
"name": "Science Fiction",
"item": "https://example.com/books/sciencefiction"
},{
"@type": "ListItem",
"position": 3,
"name": "Award Winners"
}]
}
</script>
</head>
<body>
</body>
</html>
<html>
<head>
<title>Award Winners</title>
<script type="application/ld+json">
{
"@context": "https://schema.org",
"@type": "BreadcrumbList",
"itemListElement": [{
"@type": "ListItem",
"position": 1,
"name": "Books",
"item": "https://example.com/books"
},{
"@type": "ListItem",
"position": 2,
"name": "Science Fiction",
"item": "https://example.com/books/sciencefiction"
},{
"@type": "ListItem",
"position": 3,
"name": "Award Winners"
}]
}
</script>
</head>
<body>
</body>
</html>
RDFa
Here's an example in RDFa to support that breadcrumb:
<html>
<head>
<title>Award Winners</title>
</head>
<body>
<ol vocab="https://schema.org/" typeof="BreadcrumbList">
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/books">
<span property="name">Books</span></a>
<meta property="position" content="1">
</li>
›
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/books/sciencefiction">
<span property="name">Science Fiction</span></a>
<meta property="position" content="2">
</li>
›
<li property="itemListElement" typeof="ListItem">
<span property="name">Award Winners</span>
<meta property="position" content="3">
</li>
</ol>
</body>
</html>
<html>
<head>
<title>Award Winners</title>
</head>
<body>
<ol vocab="https://schema.org/" typeof="BreadcrumbList">
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/books">
<span property="name">Books</span></a>
<meta property="position" content="1">
</li>
›
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/books/sciencefiction">
<span property="name">Science Fiction</span></a>
<meta property="position" content="2">
</li>
›
<li property="itemListElement" typeof="ListItem">
<span property="name">Award Winners</span>
<meta property="position" content="3">
</li>
</ol>
</body>
</html>
Microdata
Here's an example in Microdata to support that breadcrumb:
<html>
<head>
<title>Award Winners</title>
</head>
<body>
<ol itemscope itemtype="https://schema.org/BreadcrumbList">
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemprop="item" href="https://example.com/books">
<span itemprop="name">Books</span></a>
<meta itemprop="position" content="1" />
</li>
›
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemscope itemtype="https://schema.org/WebPage"
itemprop="item" itemid="https://example.com/books/sciencefiction"
href="https://example.com/books/sciencefiction">
<span itemprop="name">Science Fiction</span></a>
<meta itemprop="position" content="2" />
</li>
›
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<span itemprop="name">Award winners</span>
<meta itemprop="position" content="3" />
</li>
</ol>
</body>
</html>
<html>
<head>
<title>Award Winners</title>
</head>
<body>
<ol itemscope itemtype="https://schema.org/BreadcrumbList">
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemprop="item" href="https://example.com/books">
<span itemprop="name">Books</span></a>
<meta itemprop="position" content="1" />
</li>
›
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemscope itemtype="https://schema.org/WebPage"
itemprop="item" itemid="https://example.com/books/sciencefiction"
href="https://example.com/books/sciencefiction">
<span itemprop="name">Science Fiction</span></a>
<meta itemprop="position" content="2" />
</li>
›
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<span itemprop="name">Award winners</span>
<meta itemprop="position" content="3" />
</li>
</ol>
</body>
</html>
HTML
Here's an example of an HTML breadcrumb block within the page as part of the visual design.
<html>
<head>
<title>Award Winners</title>
</head>
<body>
<ol>
<li>
<a href="http://www.example.com/books">Books</a>
</li>
<li>
<a href="http://www.example.com/sciencefiction">Science Fiction</a>
</li>
<li>
Award Winners
</li>
</ol>
</body>
</html>
Multiple breadcrumb trail
If there are multiple ways to navigate to a page on your site, you can specify multiple
breadcrumb trails for a single page. Here's one breadcrumb trail that leads to a page
for award winning books:
Books ›
Science Fiction ›
Award Winners
Here's the another breadcrumb trail that leads to the same page:
Literature ›
Award Winners
JSON-LD
Here's the example JSON-LD that supports multiple breadcrumb trails:
<html>
<head>
<title>Award Winners</title>
<script type="application/ld+json">
[{
"@context": "https://schema.org",
"@type": "BreadcrumbList",
"itemListElement": [{
"@type": "ListItem",
"position": 1,
"name": "Books",
"item": "https://example.com/books"
},{
"@type": "ListItem",
"position": 2,
"name": "Science Fiction",
"item": "https://example.com/books/sciencefiction"
},{
"@type": "ListItem",
"position": 3,
"name": "Award Winners"
}]
},
{
"@context": "https://schema.org",
"@type": "BreadcrumbList",
"itemListElement": [{
"@type": "ListItem",
"position": 1,
"name": "Literature",
"item": "https://example.com/literature"
},{
"@type": "ListItem",
"position": 2,
"name": "Award Winners"
}]
}]
</script>
</head>
<body>
</body>
</html>
<html>
<head>
<title>Award Winners</title>
<script type="application/ld+json">
[{
"@context": "https://schema.org",
"@type": "BreadcrumbList",
"itemListElement": [{
"@type": "ListItem",
"position": 1,
"name": "Books",
"item": "https://example.com/books"
},{
"@type": "ListItem",
"position": 2,
"name": "Science Fiction",
"item": "https://example.com/books/sciencefiction"
},{
"@type": "ListItem",
"position": 3,
"name": "Award Winners"
}]
},
{
"@context": "https://schema.org",
"@type": "BreadcrumbList",
"itemListElement": [{
"@type": "ListItem",
"position": 1,
"name": "Literature",
"item": "https://example.com/literature"
},{
"@type": "ListItem",
"position": 2,
"name": "Award Winners"
}]
}]
</script>
</head>
<body>
</body>
</html>
RDFa
Here's the example RDFa that supports multiple breadcrumb trails:
<html>
<head>
<title>Award Winners</title>
</head>
<body>
<ol vocab="https://schema.org/" typeof="BreadcrumbList">
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/books">
<span property="name">Books</span></a>
<meta property="position" content="1">
</li>
›
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/books/sciencefiction">
<span property="name">Science Fiction</span></a>
<meta property="position" content="2">
</li>
›
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/books/sciencefiction/awardwinners">
<span property="name">Award Winners</span></a>
<meta property="position" content="3">
</li>
</ol>
<ol vocab="https://schema.org/" typeof="BreadcrumbList">
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/literature">
<span property="name">Literature</span></a>
<meta property="position" content="1">
</li>
›
<li property="itemListElement" typeof="ListItem">
<span property="name">Award Winners</span>
<meta property="position" content="2">
</li>
</ol>
</body>
</html>
<html>
<head>
<title>Award Winners</title>
</head>
<body>
<ol vocab="https://schema.org/" typeof="BreadcrumbList">
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/books">
<span property="name">Books</span></a>
<meta property="position" content="1">
</li>
›
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/books/sciencefiction">
<span property="name">Science Fiction</span></a>
<meta property="position" content="2">
</li>
›
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/books/sciencefiction/awardwinners">
<span property="name">Award Winners</span></a>
<meta property="position" content="3">
</li>
</ol>
<ol vocab="https://schema.org/" typeof="BreadcrumbList">
<li property="itemListElement" typeof="ListItem">
<a property="item" typeof="WebPage"
href="https://example.com/literature">
<span property="name">Literature</span></a>
<meta property="position" content="1">
</li>
›
<li property="itemListElement" typeof="ListItem">
<span property="name">Award Winners</span>
<meta property="position" content="2">
</li>
</ol>
</body>
</html>
Microdata
Here's the example Microdata that supports multiple breadcrumb trails:
<html>
<head>
<title>Award Winners</title>
</head>
<body>
<ol itemscope itemtype="https://schema.org/BreadcrumbList">
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemprop="item" href="https://example.com/books">
<span itemprop="name">Books</span></a>
<meta itemprop="position" content="1" />
</li>
›
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemscope itemtype="https://schema.org/WebPage"
itemprop="item" itemid="https://example.com/books/sciencefiction"
href="https://example.com/books/sciencefiction">
<span itemprop="name">Science Fiction</span></a>
<meta itemprop="position" content="2" />
</li>
›
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemprop="item" href="https://example.com/books/sciencefiction/awardwinners">
<span itemprop="name">Award Winners</span></a>
<meta itemprop="position" content="3" />
</li>
</ol>
<ol itemscope itemtype="https://schema.org/BreadcrumbList">
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemprop="item" href="https://example.com/literature">
<span itemprop="name">Literature</span></a>
<meta itemprop="position" content="1" />
</li>
›
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<span itemprop="name">Award Winners</span>
<meta itemprop="position" content="2" />
</li>
</ol>
</body>
</html>
<html>
<head>
<title>Award Winners</title>
</head>
<body>
<ol itemscope itemtype="https://schema.org/BreadcrumbList">
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemprop="item" href="https://example.com/books">
<span itemprop="name">Books</span></a>
<meta itemprop="position" content="1" />
</li>
›
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemscope itemtype="https://schema.org/WebPage"
itemprop="item" itemid="https://example.com/books/sciencefiction"
href="https://example.com/books/sciencefiction">
<span itemprop="name">Science Fiction</span></a>
<meta itemprop="position" content="2" />
</li>
›
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemprop="item" href="https://example.com/books/sciencefiction/awardwinners">
<span itemprop="name">Award Winners</span></a>
<meta itemprop="position" content="3" />
</li>
</ol>
<ol itemscope itemtype="https://schema.org/BreadcrumbList">
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<a itemprop="item" href="https://example.com/literature">
<span itemprop="name">Literature</span></a>
<meta itemprop="position" content="1" />
</li>
›
<li itemprop="itemListElement" itemscope
itemtype="https://schema.org/ListItem">
<span itemprop="name">Award Winners</span>
<meta itemprop="position" content="2" />
</li>
</ol>
</body>
</html>
HTML
Here's an example of an HTML breadcrumb block within the page as part of the visual design.
<html>
<head>
<title>Award Winners</title>
</head>
<body>
<ol>
<li>
<a href="http://www.example.com/books">Books</a>
</li>
<li>
<a href="http://www.example.com/books/sciencefiction">Science Fiction</a>
</li>
<li>
Award Winners
</li>
</ol>
<ol>
<li>
<a href="http://www.example.com/literature">Literature</a>
</li>
<li>
Award Winners
</li>
</ol>
</body>
</html>
Guidelines
You must follow these guidelines to be eligible to appear with breadcrumbs in Google Search.
Warning: If Google detects that some of the markup on your pages
may be using techniques that are outside our structured data guidelines, your site may receive
a manual action.
Webmaster guidelines
General structured data guidelines
Structured data type definitions
To specify breadcrumbs, define an BreadcrumbList that contains at least two
ListItems. You must include the required properties for your content to be eligible
for display with breadcrumbs.
BreadcrumbList
BreadcrumbList is the
container item that holds all elements in the list. The
full definition of BreadcrumbList is available at
schema.org/BreadcrumbList.
Required properties
itemListElement
BreadcrumbList
An array of breadcrumbs listed in a specific order. Specify each breadcrumb with a
ListItem For example:
{
"@context": "https://schema.org",
"@type": "BreadcrumbList",
"itemListElement": [{
"@type": "ListItem",
"position": 1,
"name": "Books",
"item": "https://example.com/books"
},{
"@type": "ListItem",
"position": 2,
"name": "Authors",
"item": "https://example.com/books/authors"
},{
"@type": "ListItem",
"position": 3,
"name": "Ann Leckie",
"item": "https://example.com/books/authors/annleckie"
}]
}
ListItem
ListItem contains details about an individual item in the list. The full
definition of ListItem is available at
schema.org/ListItem.
Required properties
item
URL or a
subtype of Thing
The URL to the webpage that represents the breadcrumb. There are two ways to specify item:
URL: Specify the URL of the page. For example:
"item": "https://example.com/books"
Thing: Use an id to specify the URL based on the markup format
you're using:
JSON-LD: Use @id to specify the URL.
Microdata: You can use href or itemid
to specify the URL.
RDFa: You can use about, href,
or resource to specify the URL.
If the breadcrumb is the last item in the breadcrumb trail, item is not
required. If item isn't included for the last item, Google uses the URL
of the containing page.
name
Text
The title of the breadcrumb displayed for the user. If you're using a
Thing with a name instead of a URL to specify item, then name is not required.
position
Integer
The position of the breadcrumb in the breadcrumb trail. Position 1 signifies
the beginning of the trail.
Monitor rich results with Search Console
Search Console is a tool that helps you monitor how your pages perform in Google Search.
You don't have to sign up for Search Console to be included in Google Search results,
but it can help you understand and improve how Google sees your site. We
recommend checking Search Console in the following cases:
After deploying structured data for the first time
After releasing new templates or updating your code
Analyzing traffic periodically
After deploying structured data for the first time
After Google has indexed your pages, look for issues using the relevant
Rich result status report.
Ideally you should see an increase of valid pages, and no increase in errors or warnings. If you find issues
in your structured data:
Fix the errors.
Inspect a live URL to check if the issue persists.
Request validation using the status report.
After releasing new templates or updating your code
When you make significant changes to your website, monitor for increases in structured data errors and warnings.
If you see an increase in errors, perhaps you rolled out a new template that doesn't work, or your site interacts with the existing
template in a new and bad way.
If you see a decrease in valid items (not matched by an increase in errors), perhaps you are
no longer embedding structured data in your pages. Use the
URL Inspection tool to learn what is causing the issue.
Analyzing traffic periodically
Analyze your Google Search traffic using the Performance Report.
The data will show you how often your page appears as a rich result in Search, how often users click on it and what is
the average position you appear on search results. You can also automatically pull these
results with the Search
Console API.
Troubleshooting
Important: Google does not guarantee that features that consume structured data will
show up in search results. For a list of common reasons why Google may not
show your content in a rich result, see the General
Structured Data Guidelines.
If you're having trouble implementing structured data, here are some resources that may help you.
You might have an error in your structured data. Check the
list of structured
data errors.
Troubleshoot
missing rich results / drop in total rich results.
For general questions about crawling and indexing, check the
Webmaster FAQ.
Note: Allow time for re-crawling and re-indexing. Remember that it
may take several days after publishing a page for Google to find and crawl it.
Ask a question in the Webmaster
Office Hours.
Post a question in the Webmaster
forum.
Send feedback
Except as otherwise noted, the content of this page is licensed under the Creative Commons Attribution 4.0 License, and code samples are licensed under the Apache 2.0 License. For details, see the Google Developers Site Policies. Java is a registered trademark of Oracle and/or its affiliates. Last updated 2020-06-29 UTC.